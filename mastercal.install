<?php
/**
 * @file
 *
 * Install and uninstall functions for the mastercal module.
 */

// Include the helper functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.helper.inc';

// Include the WSCLient functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.wsclient.inc';

/**
 * Implements hook_schema().
 */
function mastercal_schema() {
  $schema['mastercal_calendar'] = array(
    'description' => 'Stores information about calendars.',
    'fields' => array(
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Name of the calendar.',
      ),
        'cid' => array(
        'description' => 'Calendar ID number.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'username' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The API username for this calendar.'
      ),
      'password' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The API password associated with the username.',
      ),
      'start_date' => array(
        'type' => 'int',
        'not null' => TRUE,
        'length' => 11,
        'description' => 'The UNIX timestamp of the start date for this calendar.',
      ),
      'time_range' => array(
        'type' => 'int',
        'not null' => TRUE,
        'length' => 255,
        'default' => '1',
        'description' => 'The number of months into the future events should be imported.',
      ),
      'connected' => array(
        'type' => 'int',
        'not null' => TRUE,
        'length' => 2,
        'default' => '0',
        'description' => 'Integer representing a boolean on whether the calendar can connect to the API or not.',
      ),
    ),
    'primary key' => array('cid'),
  );
    
  return $schema;
}

function mastercal_install() {
  // Create the web service record in the wsclient table.
  mastercal_default_wsclient_service();
  
  // Obscure the default username and password.
  $un = base64_decode('aXRzX3dlYl9zZXJ2aWNlcw==');
  $pw = base64_decode('U3duWnlETllhdmRScmhK');
  
  
  // Set the mastercal default parameter in the variable table.
  variable_set('mastercal_default_username', $un);
  variable_set('mastercal_default_password', $pw);
  
  // Use get_t() to get the name of our localization function for translation
  // during install, when t() is not available.
  $t = get_t();

  // Define the node type.
  $mastercal_event = array(
    'type' => 'mastercal_event',
    'name' => $t('Master Calendar Event'),
    'module' => 'mastercal',
    'base' => 'node_content',
    'description' => $t('This is an event content type imported by the UIowa Master Calendar module.'),
    'has_title' => TRUE,
    'title_label' => $t('Name'),
  );

  // Complete the node type definition by setting any defaults not explicitly
  // declared above.
  // http://api.drupal.org/api/function/node_type_set_defaults/7
  $content_type = node_type_set_defaults($mastercal_event);
  node_add_body_field($content_type);

  // Save the content type
  node_type_save($content_type);

  // Hide comments for this node. 
  // http://api.drupal.org/api/drupal/modules--comment--comment.module/7
  variable_set('comment_mastercal_event', 'COMMENT_NODE_HIDDEN');

  // Hide date and author information.
  variable_set('node_submitted_mastercal_event', FALSE);
  
  
  
  // Create all the fields we are adding to our content type.
  // http://api.drupal.org/api/function/field_create_field/7
  foreach (_mastercal_installed_fields() as $field) {
    field_create_field($field);
  }

  // Create all the instances for our fields.
  // http://api.drupal.org/api/function/field_create_instance/7
  foreach (_mastercal_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = $mastercal_event['type'];
    field_create_instance($instance);
  }
  taxonomy_vocabulary_save((object) array(
    'name' => 'Event Type',
    'machine_name' => 'event_types',
  ));
  
}

/**
 * Returns a structured array defining the fields created by this content type.
 *
 * This is packaged in a function so it can be used in both
 * hook_install() and hook_uninstall().
 */
function _mastercal_installed_fields() {
  // Get the current translation.
  $t = get_t();
  
  // Create the fields array and assign field definitions.
  $fields = array();
  
  // Calendar ID
  // field_event_cid
  $fields['field_event_cid'] = array(  
    'field_name' => 'field_event_cid',
    'type' => 'number_integer',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
    'entity_types' => array(),
    'foreign keys' => array(),
    'indexes' => array(),
    'module' => 'number',
    'settings' => array(),
  );
  
  // Event Details ID
  // field_event_did
  $fields['field_event_did'] = array(
    'field_name' => 'field_event_did',
    'type' => 'number_integer',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
    'entity_types' => array(),
    'foreign keys' => array(),
    'indexes' => array(),
    'module' => 'number',
    'settings' => array(),
  );
  
  // Event Date
  // field_event_date
  $fields['field_event_date'] = array(
    'field_name' => 'field_event_date',
    'type' => 'datetime',
    'active' => '1',
    'cardinality' => FIELD_CARDINALITY_UNLIMITED,
    'deleted' => '0',
    'entity_types' => array(),
    'foreign keys' => array(),
    'indexes' => array(),
    'module' => 'date',
    'settings' => array(
      'granularity' => array(
        'day' => 'day',
        'hour' => 'hour',
        'minute' => 'minute',
        'month' => 'month',
        'second' => 0,
        'year' => 'year',
      ),
      'repeat' => 0,
      'timezone_db' => 'UTC',
      'todate' => 'optional',
      'tz_handling' => 'site',
    ),
  );
  
  // Contact Name
  // field_event_contact
  $fields['field_event_contact'] = array(
    'field_name' => 'field_event_contact',
    'type' => 'text',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
    'entity_types' => array(),
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'module' => 'text',
    'settings' => array(
      'max_length' => '255',
    ),
  );
  
  // Contact Email
  // field_event_email
  $fields['field_event_email'] = array(
    'field_name' => 'field_event_email',
    'type' => 'text',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
    'entity_types' => array(),
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'module' => 'text',
    'settings' => array(
      'max_length' => '255',
    ),
  );

  // Event Location
  // field_event_location
  $fields['field_event_location'] = array(
    'field_name' => 'field_event_location',
    'type' => 'text',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
    'entity_types' => array(),
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'module' => 'text',
    'settings' => array(
      'max_length' => '255',
    ),
  );

  // Event URL
  // field_event_url
  $fields['field_event_url'] = array(
    'field_name' => 'field_event_url',
    'type' => 'text',
    'active' => '1',
    'cardinality' => '1',
    'deleted' => '0',
    'entity_types' => array(),
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'module' => 'text',
    'settings' => array(
      'max_length' => '255',
    ),
  );
  
  // Event Type
  // field_event_type
  $fields['field_event_type'] = array(
    'field_name' => 'field_event_type',
    'type' => 'taxonomy_term_reference',
    'cardinality' => 1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'event_types',
          'parent' => 0,
        ),
      ),
    ),
  );
  
  // Image
  // field_event_image
  $fields['field_event_image'] = array(
    'field_name' => 'field_event_image',
    'type'       => 'image',
    'cardinality' => 1,
  );
  
  return $fields;
}

/**
 * Returns a structured array defining the instances for this content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes. 
 *
 * This is provided as a function so that it can be used in both hook_install()
 * and hook_uninstall().
 */
function _mastercal_installed_instances() {
  // Get the current translation.
  $t = get_t();
  
  // Return the instances of the fields defined in _mastercal_installed_fields.
  return array(
    // Event Calendar ID
    // field_event_cid
    'field_event_cid' => array(
      'bundle' => 'mastercal_event',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'number',
          'settings' => array(
            'decimal_separator' => '.',
            'prefix_suffix' => TRUE,
            'scale' => 0,
            'thousand_separator' => ' ',
          ),
          'type' => 'number_integer',
          'weight' => 6,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_event_cid',
      'label' => 'Calendar ID',
      'required' => 1,
      'settings' => array(
        'max' => '',
        'min' => '',
        'prefix' => '',
        'suffix' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 0,
        'module' => 'number',
        'settings' => array(),
        'type' => 'number',
        'weight' => '-4',
      ),
    ),
    // Event Details ID
    // field_event_did
    'field_event_did' => array(
      'bundle' => 'mastercal_event',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'entity_type' => 'node',
      'field_name' => 'field_event_did',
      'label' => 'Event Details ID',
      'required' => 1,
      'widget' => array(
        'weight' => '-3',
      ),
    ),  
    // Event Date
    // field_event_date
    'field_event_date' => array(
      'bundle' => 'mastercal_event',
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'date',
          'settings' => array(
            'format_type' => 'long',
            'fromto' => 'both',
            'multiple_from' => '',
            'multiple_number' => '',
            'multiple_to' => '',
            'show_repeat_rule' => 'show',
          ),
          'type' => 'date_default',
          'weight' => 1,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_event_date',
      'label' => 'Date',
      'required' => 1,
      'settings' => array(
        'default_value' => 'now',
        'default_value2' => 'blank',
        'default_value_code' => '',
        'default_value_code2' => '',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'date',
        'settings' => array(
          'increment' => '15',
          'input_format' => 'm/d/Y - H:i:s',
          'input_format_custom' => '',
          'label_position' => 'above',
          'repeat_collapsed' => 0,
          'text_parts' => array(),
          'year_range' => '-3:+3',
        ),
        'type' => 'date_popup',
        'weight' => '-2',
      ),
    ),
    // Event Contact Name
    // field_event_contact
    'field_event_contact' => array(
      'bundle' => 'mastercal_event',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 4,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_event_contact',
    'label' => 'Contact Name',
    'required' => 0,
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => '60',
      ),
      'type' => 'text_textfield',
      'weight' => '-1',
      ),
    ),
    // Event Contact Email
    // field_event_email
    'field_event_email' => array(
      'bundle' => 'mastercal_event',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 5,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_event_email',
      'label' => 'Contact Email',
      'required' => 0,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '0',
      ),
    ), 
    // Event Location
    // field_event_location
    'field_event_location' => array(
      'bundle' => 'mastercal_event',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 2,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_event_location',
      'label' => 'Location',
      'required' => 0,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '1',
      ),
    ), 
    // Event URL
    // field_event_url
    'field_event_url' => array(
      'bundle' => 'mastercal_event',
      'default_value' => NULL,
      'deleted' => '0',
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'above',
          'module' => 'text',
          'settings' => array(),
          'type' => 'text_default',
          'weight' => 3,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_event_url',
      'label' => 'Location URL',
      'required' => 0,
      'settings' => array(
        'text_processing' => '0',
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'text',
        'settings' => array(
          'size' => '60',
        ),
        'type' => 'text_textfield',
        'weight' => '2',
      ),
    ),
    // Event Type
    // field_event_type
    'field_event_type' => array(
      'field_name' => 'field_event_type',
      'label' => $t('Event Type'),
      'bundle' => 'mastercal_event',
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_select',
        'weight' => '3',
      ),
    ),
    // Event Image
    // field_event_image
    'field_event_image' => array(
      'field_name'  => 'field_event_image',
      'label'       => $t('Upload an image:'),
      'required'    => FALSE,
      'widget' => array(
        'type'    => 'image_image',
        'weight'  => '4',
      ),
    ),
  );
}

/**
 * Implements hook_uninstall().
 */
function mastercal_uninstall() {
  // Delete persistent variables.
  variable_del('comment_mastercal_event');
  variable_del('node_submitted_mastercal_event');
  variable_del('mastercal_default_username');
  variable_del('mastercal_default_password');
  
  // Gather all the content that might have been created while this
  // module was enabled. Simple selects still use db_query().
  // http://api.drupal.org/api/function/db_query/7
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'mastercal_event'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }

  // Delete all the nodes at once.
  // http://api.drupal.org/api/function/node_delete_multiple/7
  node_delete_multiple($nids);

  // Loop over each of the fields defined by this module and delete
  // all instances of the field, their data, and the field itself.
  // http://api.drupal.org/api/function/field_delete_field/7
  foreach (array_keys(_mastercal_installed_fields()) as $field) {
    field_delete_field($field);
  }

  // Loop over any remaining field instances attached to the 
  // mastercal_event content type (such as the body field) and delete them
  // individually.
  // http://api.drupal.org/api/function/field_delete_field/7
  $instances = field_info_instances('node', 'mastercal_event');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }

  // Delete the mastercal_event content type.
  // http://api.drupal.org/api/function/node_type_delete/7
  node_type_delete('mastercal_event');
  $vid = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = 'event_types'")->fetchField();
  taxonomy_vocabulary_delete($vid);
  
  // Purge all field information.
  // http://api.drupal.org/api/function/field_purge_batch/7
  field_purge_batch(1000);
}

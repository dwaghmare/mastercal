<?php
/**
 * @file
 * A module integrating UIowa Master Calendar with Drupal by importing events
 * as nodes for one or multiple calendars.
 *
 * This file includes mastercal implementations of Drupal hooks.
 */

// Include the helper functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.helper.inc';

// Include the WSCLient functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.wsclient.inc';

/**
 * Implements hook_help().
 */
function mastercal_help($path, $arg) {
  if ($path == 'admin/help#mastercal') {
    return t('A module to import events as nodes from the University of Iowa Master Calendar.');
  }
}

/**
 * Implements hook_permission().
 * - The option to give this permission will show up under Mastercal in the permissions page.
 */
function mastercal_permission() {
  return array(
    'administer mastercal' => array(
      'title' => t('Administer mastercal'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mastercal_menu() {
  $items = array();
  
  $items['admin/config/uiowa'] = array(
    'title' => 'UIowa Module Package',
    'description' => 'Custom modules developed by ITS Web Services.',
    'position' => 'right',
    'weight' => '4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_uiowa_form'),
    'access arguments' => array('administer_mastercal'),
    'file' => 'mastercal.admin.inc',
  );
  
  // Path to the mastercal configuration page.
  $items['admin/config/uiowa/mastercal'] = array(
    'title' => 'Master Calendar',
    'description' => 'Add, remove and configure calendars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_admin_form'),
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );
    
  // Callback URL for adding a new calendar.
  $items['admin/config/uiowa/mastercal/add'] = array(
    'title' => 'Add a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_add_form'),
    'access arguments' => array('administer mastercal'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mastercal.admin.inc',
  );
  
  // Passes the CID of the calendar to edit.
  // @TODO: The access callback should be changed to be more restrictive.
  $items['admin/config/uiowa/mastercal/%/edit'] = array(
  'title' => 'Edit a calendar.',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('mastercal_edit_form', 4),
  'access callback' => TRUE,
  'access arguments' => array('administer mastercal'),
  'file' => 'mastercal.admin.inc',
  );
  
  // Passes the CID of the calendar to remove.
  // @TODO: The access callback should be changed to be more restrictive.
  $items['admin/config/uiowa/mastercal/%/delete'] = array(
    'title' => 'Delete a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_delete_form', 4),
    'access callback' => TRUE,
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );
  
  return $items;
}

/**
 * Implements hook_cron().
 * 
 * Imports and updates all events in the database.
 */
function mastercal_cron() {
  // Initialize the nodes created/updated counter array.
  $nodes = array(
    'created' => 0,
    'updated' => 0
  );
  
  // Load the calendars from the database.
  $calendars = _mastercal_load();
    
  // For each calendar in the database, run get_events.
  foreach ($calendars as $calendar) {
    if ($calendar->connected == 1) {
      // Assign the cid to a variable.
      $cid = $calendar->cid;
    
      // Get the result from the MC API.
      $events = _mastercal_get_events($cid);
    
      // Iterate over each event.
      foreach ($events as $id => $event) {
        // Assign XML fields to variables if not empty, otherwise NULL.
        $eid = $id;
        $did = $event['EventDetailID'];
        $calendar_name = $calendar->name;
        $event_type = $event['EventTypeName'];
        $contact_name = $event['ContactName'];
        $contact_email = $event['ContactEmail'];
        $event_loc = (!empty($event['Location'])) ? $event['Location'] : NULL;
        $event_loc_url = (!empty($event['LocationURL'])) ? $event['LocationURL'] : NULL;
      
        // Create updated time variables.
        // @TODO: Use these to only update events if they have changed.
        $event_updated_date = $event['EventUpdatedDate'];
        $event_detail_updated_date = $event['EventDetailUpdatedDate'];
      
        // See if the event already exists as a node in Drupal.
        $query = new EntityFieldQuery;
        $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'mastercal_event')
        ->fieldCondition('field_event_eid', 'value', $eid, '=')
        ->execute();
      
        // If not, create and prepare a new node.
        if (empty($result)) {
          // Prepare the node object.
          $node = new stdClass();
          $node->type = 'mastercal_event';
          $node->language = LANGUAGE_NONE;
          node_object_prepare($node);
        
          // Sets publisher to first user.
          $node->uid = 1;
        
          // Add one to the created count.
          $nodes['created'] += 1;
        }
        // Otherwise, update the existing node.
        else {
          // Load the the existing node.
          $node_data = reset($result['node']);
          $node = node_load($node_data->nid);
        
          // Add one to the updated count.
          $nodes['updated'] += 1;
        }
      
        // Assign variables to node object fields.
        $node->title = $event['Title'];
        $node->field_event_eid['und'][0]['value'] = $eid;
        $node->field_event_did['und'][0]['value'] = $did;
        $node->field_event_calendar['und'][0]['value'] = $calendar_name;
        $node->field_event_type['und'][0]['value'] = $event_type;
        $node->field_event_contact['und'][0]['value'] = $contact_name;
        $node->field_event_email['und'][0]['value'] = $contact_email;
        $node->field_event_location['und'][0]['value'] = $event_loc;
        $node->field_event_url['und'][0]['value'] = $event_loc_url;
      
        // Prepare the body field.
        $node->body['und'][0]['value'] = _mastercal_format($event['Description']);
        $node->body['und'][0]['format'] = 'filtered_html';
      
        // Count the number of dates.
        $n_dates = count($event['EventDate']);
      
        // If multiple dates, iterate over each and assign it to the node properly.
        if ($n_dates > 1) {
          $count = 0;
          foreach ($event['EventDate'] as $day) {
            $date = explode('T', $day['Start']);
            $time = explode('-', $date[1]);
            $datetime = $date[0] . ' ' . $time[0];
            $the_date = gmdate('Y-m-d H:i:s', strtotime($datetime));
      
            $node->field_event_date['und'][$count]['value'] = $the_date;
            $node->field_event_date['und'][$count]['value2'] = $the_date;
           
            $count += 1;
          }
        }
        else {
          $date = explode('T', $event['EventDate'][0]['Start']);
          $time = explode('-', $date[1]);
          $datetime = $date[0] . ' ' . $time[0];
          $the_date = gmdate('Y-m-d H:i:s', strtotime($datetime));
      
          $node->field_event_date['und'][0]['value'] = $the_date;
          $node->field_event_date['und'][0]['value2'] = $the_date;
          $node->field_event_date['und'][0]['date_type'] = 'datetime';
        }
      
        // Grab the event data for this event using GetEvent. The 'Image' field
        // is not returned in GetEvents, among other fields.
        $event_data = _mastercal_get_event($cid, $did);
      
        // If the event has an image, decode it, save it to the public file
        // system and assign it to the corresponding node.
        // NOTE : This uses the 'Add Image' link under the body field of the
        // Master Calendar submit form.
        if (isset($event_data[0]['Image'])) {
          $image = base64_decode($event_data[0]['Image']);
          $file = file_save_data($image, 'public://' . $event_data[0]['ImageName'], FILE_EXISTS_REPLACE);
          $node->field_event_image['und']['0']['fid'] = $file->fid;
        }
        
        // TODO: Refactor this to reduce running time. 
        // Too many loops and API calls.
        
        // Get the UDQ's for this event.
        $udqs = _mastercal_get_udqs($cid, $eid);
      
        // Get the term selections for the calendar.
        $terms = unserialize($calendar->terms);
      
        // Run taxonomy functionality.
        if (!empty($terms)) {
          // An array of taxonomy terms.
          $taxonomy = array();
          
          // Iterate over each term.
          foreach ($terms as $key => $value) {
            // Get the UDQID for each term selection.
            if ($value != 0) {
              foreach ($udqs as $udq) {
                // If the UDQID matches the selection value, assign it to the 
                // taxonomy array.
                if ($udq['UDQID'] == $value && !empty($udq['Answer'])) {
                  $taxonomy[$udq['UDQID']] = $udq['Answer'];                
                }
              }
            }
          }
        
          // Count.
          $n = 0;
          
          // Iterate over each taxonomy term.
          foreach ($taxonomy as $key2 => $value2) {
            // Return the tid of the taxonomy term, if set.
            $tid = _mastercal_create_term($value2);
        
            // Assign the term to the event type field.
            if (!empty($tid)) {
              $node->field_event_tags['und'][$n]['tid'] = $tid;
        
              // Increment the count.
              $n++;
            }
          }
        }
        
        // Iterate over each UDQ.
        foreach ($udqs as $udq2) {
          // Create a reusable field name variable.
          $field_name = 'field_event_' . strtolower(str_replace(' ', '_', $calendar->name)) . '_udq_' . $udq2['UDQID'];
          
          // Assign the field instance to a variable.
          $field_instance = field_info_instance('node', $field_name, 'mastercal_event'); 
          
          // If the field instance exists.
          if ($field_instance) { 
            // If the field instance is a date, convert it to a timestamp.
            if ($field_instance['widget']['type'] == 'date_select') {
              $answer = !empty($udq2['Answer']) ? $udq2['Answer'] : NULL;
            }
            else {
              $answer = !empty($udq2['Answer']) ? $udq2['Answer'] : NULL;
            }
            
            // Save the field to the node.
            $code = '$node->' . $field_name . '["und"][0]["value"] = $answer;';
            eval($code);
          }  
        }
        
        // Save the node.
        node_submit($node);
        node_save($node);
      }   
    }
  
    // Set confirmation message with number of nodes created and updated.
    drupal_set_message(t("@created events created, @updated events updated.", 
    array('@created' => $nodes['created'], '@updated' => $nodes['updated'])));
  }
}


<?php
// $Id$

/**
 * @file
 * A module querying Whitepages for a list of department members.
 *
 * This module provides a block that lists all of the
 * members of a specified dapartment. 
 * 
 */

 //sets a couple default values

define('MASTERCAL_HOST', 'directory.uiowa.edu');
define('MASTERCAL_ID', 62);
define('MASTERCAL_AUTH', False);

   
 
/**
 * Implements hook_help().
 */
function mastercal_help($path, $arg) {
  if ($path == 'admin/help#mastercal') {
    return t('A module to display members of a specified department.');
  }
}



/**
 * Implements hook_menu().
 */
function mastercal_menu() {
  $items = array();
  
  //path to config
  $items['admin/config/people/mastercal'] = array(
    'title' => 'mastercal',
    'description' => 'config page for mastercal module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  //path to page view

  $items['org/calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'mastercal_pageview',
    'access callback' => TRUE,
  );
  
  return $items;
}



/**
 * Function to create page view
 */
function mastercal_pageview() {

  if (variable_get('MASTERCAL_AUTH')) {
    $events = client()->GetEvents();
    //print_r($events);
    $widgetData  = '';
    foreach($events as $event) {
      $widgetData .= "{title:'".$event['Title']."',start:'".$event['EventDate']."'},";
    }
    //$calendars = client()->GetCals();
    drupal_add_js(
      '(function($){jQuery(document).ready(function () { 
        $("#mastercal_page").fullCalendar({
        events: [' . $widgetData . ']
        }) });})(jQuery);', 
        array('type' => 'inline', 'scope' => 'header', 'weight' => 5)
    );   
    //print_r($calendars);

    return array(
      'para' => array(
          '#markup' => 'Calendar',
          '#prefix' => '<div id="mastercal_page">',
          '#suffix' => '</div>',
      ),
    );
  }else {
    return array(
      'prefix_suffix' => array(
        '#markup' => 'Configure the Calendar first!',
        '#prefix' => "<h2>",
        '#suffix' => "</h2>",
      ),

    );
  }
  
}

/**
 * Form builder; Create and display the Whitepages configuration settings form.
 */
function mastercal_form($form, &$form_state) {
   $calendars = client()->GetCals();
   
   $form['mastercal_name'] = array(
       '#type' => 'select',
       '#title' => t('Calendar'),
       '#options' => $calendars,
       '#default_value' => variable_get('mastercal_id', MASTERCAL_ID),
       '#description' => t('Set this to <em>Yes</em> if you would like this category to be selected by default.'),
   );
  $form = system_settings_form($form);
  $form['#submit'][] = 'mastercal_form_submit';
  return $form;
}

/**
 * Form submit handler. Save configuration settings for User Warn module.
 */
function mastercal_form_submit($form, &$form_state) {
  
  variable_set('mastercal_id', $form_state['values']['mastercal_name']);
  variable_set('MASTERCAL_AUTH', True);
  $calarray = client()->GetCals();
  variable_set('mastercal_name', $calarray[$form_state['values']['mastercal_name']]);
 
  drupal_set_message('The settings have been saved!');
}



function client() {
  require_once('mastercal_class.inc');
  $client = new mastercalSOAP();
    
  return $client;
}





/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mastercal_block_info() {

  $blocks['mastercal_block'] = array(
    'info' => t('MasterCal: block'),

  );

  return $blocks;
}



/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mastercal_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  switch ($delta) {
    case 'mastercal_block':
      $block['subject'] = t('Events');
      if (variable_get('MASTERCAL_AUTH')) {
        $block['content'] = mastercal_contents('mastercal_block');
      } else {
        $block['content'] = 'Configure the mastercal module first';
      }
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function mastercal_contents($which_block) {
  switch ($which_block) {

    case 'mastercal_block':
      $calendars = client()->GetEvents();
      //print_r(client()->GetEvent());
      if (isset($calendars)) {
        foreach($calendars as $event) {
          $body = '<a class="event-show" href="#">';
          $body .= $event['Title'];
          $body .= '</a><br /><div class="more-event">';
          if ($event['Location']) {
            $body .= '<strong>Location: </strong>';
            if ($event['LocationURL']) {
              $loc = '<a href="' . $event['LocationURL'] .'">';
              $loc .= $event['Location'] .'</a><br />';
            } else { $loc = $event['Location']; }
            $body .= $loc.'<br />';
          }
          $body .= $event['Description'] . '<br />';

          $body .= '<strong>Contact: </strong>';
          $body .= '<a href="mailto:' . $event['ContactEmail'] . '">';
          $body .= $event['ContactName'] . '</a>';
          $body .= '<br />';
          
          $date = explode('T', $event['EventDate']);
            
            $events[] = array(
                          'data' => $date[0],
                          'children' => array($body),
                        );
                          
          
        }
      }else { $events = Null; }
      $events = (isset($events) ? $events : array('No items to show'));
      //print_r($events);
      return array(
        'second_para' => array(
            '#items' => $events,
            '#theme' => 'item_list',
            '#prefix' => '<div id="mastercal_block">',
            '#suffix' => '</div>',
        ),
      );
  }
}


<?php
// $Id$

/**
 * @file
 * A module integrating UIowa Master Calendar with Drupal.
 *
 * This module imports University of Iowa Master Calendar events as nodes into Drupal.
 * 
 */
 
/**
 * Implements hook_help().
 */
function mastercal_help($path, $arg) {
  if ($path == 'admin/help#mastercal') {
    return t('A module to import events as nodes from the University of Iowa Master Calendar.');
  }
}

/**
 * Implements hook_permission().
 * - The option to give this permission will show up under Mastercal in the permissions page.
 */
function mastercal_permission() {
  return array(
    'administer mastercal' => array(
      'title' => t('Administer mastercal'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mastercal_menu() {
  $items = array();
  
  $items['admin/config/uiowa'] = array(
    'title' => 'UIowa Module Package',
    'description' => 'Custom modules developed by ITS Web Services.',
    'position' => 'right',
    'weight' => '4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_uiowa_form'),
    'access arguments' => array('administer_mastercal'),
    'file' => 'mastercal.admin.inc',
  );
  
  //path to config
  $items['admin/config/uiowa/mastercal'] = array(
    'title' => 'Master Calendar',
    'description' => 'Add, remove and configure calendars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_admin_form'),
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );
    
  //callback url for adding a new calendar
  //the function mastercal_add_form() in the admin.inc file provides the form
  $items['admin/config/user-interface/mastercal/add-set'] = array(
    'title' => 'Add a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_add_form'),
    'access arguments' => array('administer mastercal'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mastercal.admin.inc',
  );
  
  //passes the calendar id of the item you are trying to remove
  //the access callback should be changed to be more restrictive
  $items['admin/config/user-interface/mastercal/%/delete'] = array(
    'title' => 'Delete a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_delete_form', 4),
    'access callback' => True,
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );
  
  
  $items['org/testcal'] = array(
    'title' => 'Tests',
    'page callback' => 'mastercal_testview',
    'access callback' => TRUE,
  );
  
  return $items;
}

function mastercal_cron() {
  $un = base64_decode('QXJ0c19Jb3dhX0FQSQ==');
  $pw = base64_decode('QXAzZG45IW5leg==');
  //initialize an instance of the mastercalSOAP class then call the GetEvents() method
  //the calendars being queried for the events list are loaded from the database
   $param = array(
      'userName' => $un,
      'password' => $pw, 
      'startDate' => firstOfMonth(),
      'endDate' => lastOfMonth(),
      'location' => '',
      'eventName' => '',
      'calendars' => mastercal_load(),
      'eventTypes' => Null,
      'udqAnswer' => Null,
    );
    $result = mastercal_getEvents($param);
    $xml = simplexml_load_string(utf8_encode($result->GetEventsResult));
    $calenss = array();
    $count = 0;
    //parse the xml response from the web service using SimpleXML
    foreach ($xml->children() as $child) {
      //create an array to store the data
      $cals = array();
      foreach ($child->children() as $subchild) {
        //associate array var['Name of field'] = 'value of field'
        $cals[$subchild->getName()] = (string) $subchild;
      }
      $calens[] = $cals;
      $count .= 1;
    }
    //dprint_r($calens);


    //print_r($respxml);
    if (isset($calens)) {
      $events = collapseDates($calens);
    }
    else {
      $events = Null;
    }
    //dprint_r($events);
    //initialize the JSON string so I can append to it later
    //there may be a better way to create this JSON
    $nodes = array(
      'saved' => 0,
      'passed' => 0
    );
    
    foreach ($events as $id => $event) {
      // Get UDQs, specific to Arts Iowa at the moment

      
      $cid = $id;
      $did = $event['EventDetailID'];
      $contact_name = $event['ContactName'];
      $contact_email = $event['ContactEmail'];
      
      $event_loc = (!empty($event['Location'])) ? $event['Location'] : NULL;
      $event_loc_url = (!empty($event['LocationURL'])) ? $event['LocationURL'] : NULL;
      
      $node = new stdClass();
      $node->type = 'node_event';
      $node->language = LANGUAGE_NONE;
      node_object_prepare($node);
      $node->title = $event['Title'];
      $node->body['und'][0]['value'] = $event['Description'];
      $node->body['und'][0]['format'] = 'filtered_html';
      $node->field_event_cid['und'][0]['value'] = $cid;
      $node->field_event_did['und'][0]['value'] = $did;
      
     $param['eventDetailId'] = $did;
	

      
      $event_data = mastercal_getEvent($param);
        if (isset($event_data[0]['Image'])) {
          $image = base64_decode($event_data[0]['Image']);
          $file = file_save_data($image, 'public://' . $event_data[0]['ImageName'], FILE_EXISTS_REPLACE);
          $node->field_event_image['und']['0']['fid'] = $file->fid;
          //node_save($node);
        }
      
      $node->field_event_contact['und'][0]['value'] = $contact_name;
      $n_dates = count($event['EventDate']);
      if ($n_dates > 1) {
        //dprint_r('more');
        $count = 0;
        foreach ($event['EventDate'] as $day) {
          //dprint_r($day);
          $date = explode('T', $day['Start']);
          $time = explode('-', $date[1]);
          $datetime = $date[0] . ' ' . $time[0];
          $the_date = gmdate('Y-m-d H:i:s', strtotime($datetime));
          //date_default_timezone_set("UTC");
          //$UTCdate = (string) date("Y-d-m G:i:00", $the_date);
          $node->field_event_date['und'][$count]['value'] = $the_date;
          $node->field_event_date['und'][$count]['value2'] = $the_date;
          //dprint_r($count);
          $count += 1;
        }
      } 
      else {
        //dprint_r($event['EventDate']);
        $date = explode('T', $event['EventDate'][0]['Start']);
        $time = explode('-', $date[1]);
        $datetime = $date[0] . ' ' . $time[0];
        $the_date = gmdate('Y-m-d H:i:s', strtotime($datetime));

        //date_default_timezone_set("UTC");
        //$UTCdate = (string) date("Y-d-m G:i:00", $the_date);
        $node->field_event_date['und'][0]['value'] = $the_date;
        $node->field_event_date['und'][0]['value2'] = $the_date;
        $node->field_event_date['und'][0]['date_type'] = 'datetime';

      }
      //Sets publisher to first user
      $node->uid = 1;
      //workbench id for IP
      //$node->workbench_access = '38';
      #dprint_r($datetime);
      
      $node->field_event_location['und'][0]['value'] = $event_loc;
      if (!empty($event_loc_url)) {
        $node->field_event_url['und'][0]['value'] = $event_loc_url;
      }
      if (!empty($event_tag)) {
        $type_name = $event_tag;    
        mastercal_create_terms(array($type_name));
        $tid = db_query_range('SELECT tid FROM {taxonomy_term_data} WHERE name = :name ORDER BY tid DESC', 0, 
          1, array(':name' => $type_name))->fetchField();

          
        if (!empty($tid)) {
          $node->field_event_type['und'][0]['tid'] = $tid;
        }
      }
      
      $query = new EntityFieldQuery;
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'node_event')
        ->fieldCondition('field_event_cid', 'value', $cid, '=')
        ->execute();
        
      //dprint_r($result);
      if (empty($result)) {
        node_submit($node);
        node_save($node);
        $nodes['saved'] += 1;
        $node_re = node_load($node->nid);
        node_save($node_re);
      }
      else {
        $nodes['passed'] += 1;
      }
    }
    

    drupal_set_message(t("@saved nodes created, @pass events skipped.", array(
      '@saved' => $nodes['saved'], 
      '@pass' => $nodes['passed'])
      ) 
    );


}
 function collapseDates($events) {
    $collapsed = array();
    $viewed = array();
    foreach ($events as $event) {
      $cid = $event['EventID'];
      if (isset($viewed[$cid])) {
        $collapsed[$cid]['EventDate'][] = array(
          'Date' => $event['EventDate'], 
          'Start' => $event['TimeEventStart'], 
          'End' => $event['TimeEventEnd']
        );
      }
      else {
        $viewed[$cid] = True;
        $collapsed[$cid] = $event;
        $collapsed[$cid]['EventDate'] = array();
        $collapsed[$cid]['EventDate'][] = array('Date' => $event['EventDate'], 'Start' => $event['TimeEventStart'], 'End' => $event['TimeEventEnd']);
      }
    }
    return $collapsed;  
  }
 
  function firstOfMonth() {
    return date("Y-m-d", strtotime(date('m') . '/01/' . date('Y') . ' 00:00:00'));
  }

  //date of the last day of the month
  function lastOfMonth() {
    return date("Y-m-d", strtotime('-1 second', strtotime('+1 month', strtotime(date('m') . '/01/' . date('Y') . ' 00:00:00'))));
  }

function mastercal_getCals($param) {
  $service = wsclient_service_load('calendar');
  $result = $service->GetCalendars($param);
  $respxml = simplexml_load_string($result->GetCalendarsResult);
    
    //print_r($respxml);
    $calendars = array();
    foreach ($respxml->children() as $cal) {
      $calendars[(string)$cal->CalendarID] = (string)$cal->Name;
    }
  return $calendars;
}

function mastercal_getCal($param) {
  $service = wsclient_service_load('calendar');
  $result = $service->GetCalendar($param);
  $respxml = simplexml_load_string($result->GetCalendarResult);
    
    //print_r($respxml);
    $cals = array();
    foreach ($respxml->children() as $child) {
      //print_r($child->calendar);
      foreach ($child->children() as $subchild) {
        $cals[$subchild->getName()] = (string) $subchild;
        //print_r("\n".$subchild->getName().": ".$subchild."");
      }
    }

    return $cals;
}
  
function mastercal_getEvents($param) {
   
    //print_r($cal_list);
    //the Camel Case is required and not specified in the API but can be found by examining the request example on the API site /MCAPI/MCAPIService.asmx
    
    //dpm($param);
    $service = wsclient_service_load('calendar');
    $result = $service->GetEvents($param);
    return $result;
}
function mastercal_getEvent($param) {
  	$service = wsclient_service_load('calendar');
    $result = $service->GetEvent($param);
    //$result = $this->call('GetEvent', $param);
    
    //print_r($result);
    $xml = simplexml_load_string(utf8_encode($result->GetEventResult));
	//print_r($result);
    $calenss = array();
    $count = 0;
    foreach ($xml->children() as $child) {
      //print_r("\n---------------------------");
      $cals = array();
      foreach ($child->children() as $subchild) {
        $cals[$subchild->getName()] = (string) $subchild;
        //print_r("\n".$subchild->getName().": ".$subchild."");
      }
      $calens[] = $cals;
      $count .= 1;
    }
    //print_r($calens);
    //$respxml = $this->MakeXml(utf8_encode($result['GetEventsResult']));
    //print_r(variable_get('mastercal_name', 'poop'));
    //print_r($respxml);
    if (isset($calens)) {
      $calendars = $calens;
    }
    else {
      $calendars = Null;
    }

    //print_r($calendars);
    return $calendars;
  } 
  
/**
 * Create taxonomy lists.
 */
function mastercal_create_terms($list) {
$jobs = array();

  //grabs the list of vocabularies  
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $voc) {
    if ($voc->machine_name == 'event_types') {
      $vid = $voc->vid;
    }
  }
  //grabs the terms from the chosen vocabulary
  $existing = taxonomy_get_tree($vid);
  
  $loaded_terms = array();
  foreach ($existing as $job_rank) {           
    $loaded_terms[] = $job_rank->name;     
  }
  foreach ($list as $entry) {
    if (is_array($entry)) {
      if (!isset($jobs[$entry['title']])) {
        $jobs[$entry['title']] = False;
      }
    }
    else {
      if (!isset($jobs[$entry])) {
        $jobs[$entry] = False;
      }

    }
  }
  
  if (!empty($loaded_terms)) {
    foreach ($jobs as $new_term => $val) {

      if (!in_array($new_term, $loaded_terms)) {
        taxonomy_term_save((object) array(
          'name' => t($new_term),
          'vid' => $vid,
        )); 
      }
    }
  }
  else { 
    foreach ($jobs as $new_term => $val) {
      //print_r($new_term);
      taxonomy_term_save((object) array(
        'name' => t($new_term),
        'vid' => $vid,
      )); 
    }
  }


}
function mastercal_create_term($eventtype) {

  //grabs the list of vocabularies  
  $vocabularies = taxonomy_get_vocabularies();
  foreach ($vocabularies as $voc) {
    if ($voc->machine_name == 'event_types') {
      $vid = $voc->vid;
    }
  }
  //grabs the terms from the chosen vocabulary
  if (!empty($vid)) {
    $new = array('vid' => $vid, 'name' => $eventtype);
    $terms = taxonomy_get_term_by_name($new['name']);
    //dpm($terms);
    //dpm($new);
    if (!empty($terms)) {
      if (count($terms) == 1) {  
        $tid = key($terms);
      }
    } else {
      // add term and get the tid
      $term = new stdClass();
      $term->name = $new['name'];
      $term->vid = $new['vid'];
      $status = taxonomy_term_save($term);
      $tid = $term->tid;
      //dpm($term);
    }
  }
  
  return $tid;
  
}
/**
 * Test view function.
 */
function mastercal_testview() {
     //drupal_add_http_header('Content-Type', 'text/plain');
    //drupal_set_header("Content-type: text/csv; charset=utf-8");
    //print generate_csv_results();
     //$result = $service->GetEventTypes($param);
     $cal_ids = mastercal_load();
   
    //print_r($cal_list);
    //the Camel Case is required and not specified in the API but can be found by examining the request example on the API site /MCAPI/MCAPIService.asmx
    $param = array(
      'startDate' => firstOfMonth(),
      'endDate' => lastOfMonth(),
      'location' => '',
      'eventName' => '',
      'calendars' => $cal_ids,
      'eventTypes' => Null,
      'udqAnswer' => Null,
    );
     $param['userName'] = 'Arts_Iowa_API';
     $param['password'] = 'Ap3dn9!nez';
     $result = mastercal_getCals($param);

     dpm($result);
     return 'work!';
}


function generate_results() {
  $service = wsclient_service_load('calendar');
     $result = $service->GetEventTypes();
  return 'dsfs'; 
}

/**
 * Helper function to check if a calendar already exists in {mastercal_source}.
 *   
 * @return boolean
 *   TRUE if calendar exists.
 *   FALSE if calendar does not exist.
 */
function cal_exists($cid) {
  return (bool) db_query_range('SELECT 1 FROM {mastercal_source} WHERE cid = :cid', 0, 1, array(':cid' => $cid))->fetchField();
}

/**
 * Helper function to check if {mastercal_source} is empty.
 *   
 * @return boolean
 *   TRUE if any records exist.
 *   FALSE if table is empty.
 */ 
function records_exist() {
  return (bool) db_query_range('SELECT 1 FROM {mastercal_source}', 0, 1)->fetchField();
}

function mastercal_save(&$cal) {
  // Save the calendar ID and its name to teh database
 $return = db_insert('mastercal_source')
            ->fields(array(
                'title' => $cal['Name'],
                'cid' => (int)$cal['CalendarID'],
              )
            )
            ->execute();
  return $return;
}

function mastercal_load() {
//for simple queries it is more economical to use db_query and SQL than to use the new Drupal 7 methods
  $result = db_query("SELECT title, cid FROM {mastercal_source}");

  $cal_ids = $result;
    $cal_list = array();
    //make sure the lsit isnt empty
    if (isset($cal_ids)) { 
      //for the soap handler to identify your array as an integer array you have to make an associative array where 'int' => array(12,32,43)
      foreach ($cal_ids as $item) {
        $cal_list['int'][] = $item->cid;
      }
    return $cal_list;
    }
    
}
function mastercal_delete($cid) {
  $deleted = db_delete('mastercal_source')
  ->condition('cid', $cid)
  ->execute();
  return $deleted;
}
function mastercal_default_wsclient_service() { 

  // Geocoder.us service (SOAP)
  $service = new WSClientServiceDescription();
  $service->name = 'calendar';
  $service->label = 'MasterCal';
  $service->url = 'https://calendar.uiowa.edu/MCAPI/MCAPIService.asmx?wsdl';
  $service->type = 'soap';
  $operation = array();
   $operation['label'] = 'GetEventTypes';
   $operation['name'] = 'GetEventTypes';
   $operation['parameter']['userName'] = array('type' => 'text', 'default value' => 'Arts_Iowa_API');
   $operation['parameter']['passWord'] = array('type' => 'text', 'default value' => 'Ap3dn9!nez');
   $operation['result'] = array('type' => 'list\u003cGetEventTypesResponse\u003e', 'label' => 'GetEventTypesResponse');
   $service->operations['GetEventTypes'] = $operation;
  try {
    $service->endpoint()->initializeMetaData();
    $services[$service->name] = $service;
  }
  catch (WSClientException $e) {
    watchdog('wsclient', $e->__toString());
  }

 



  return $services;
}
<?php
/**
 * @file
 * A module integrating UIowa Master Calendar with Drupal by importing events
 * as nodes for one or multiple calendars.
 *
 * This file includes mastercal implementations of Drupal hooks.
 */

// Include the helper functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.helper.inc';

// Include the WSCLient functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.wsclient.inc';

/**
 * Implements hook_help().
 */
function mastercal_help($path, $arg) {
  if ($path == 'admin/help#mastercal') {
    return t('A module to import events as nodes from the University of Iowa Master Calendar.');
  }
}

/**
 * Implements hook_permission().
 * - The option to give this permission will show up under Mastercal in the permissions page.
 */
function mastercal_permission() {
  return array(
    'administer mastercal' => array(
      'title' => t('Administer mastercal'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function mastercal_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])) {
    // If the form is for Mastercal events.
    if (isset($form['type']['#value'])) {
      if ($form['type']['#value'] == 'mastercal_event') {
        // Hide certain fields.
        $form['field_mc_eid']['#access'] = FALSE;
        $form['field_mc_did']['#access'] = FALSE;
        $form['field_mc_calendar']['#access'] = FALSE;
        $form['field_mc_updated_date']['#access'] = FALSE;
        $form['field_mc_detail_updated_date']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function mastercal_menu() {
  $items = array();

  $items['admin/config/uiowa'] = array(
    'title' => 'UIowa Module Package',
    'description' => 'Custom modules developed by ITS Web Services.',
    'position' => 'right',
    'weight' => '4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_uiowa_form'),
    'access arguments' => array('administer_mastercal'),
    'file' => 'mastercal.admin.inc',
  );

  // Path to the mastercal configuration page.
  $items['admin/config/uiowa/mastercal'] = array(
    'title' => 'Master Calendar',
    'description' => 'Add, remove and configure calendars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_admin_form'),
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );

  // Callback URL for adding a new calendar.
  $items['admin/config/uiowa/mastercal/add'] = array(
    'title' => 'Add a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_add_form'),
    'access arguments' => array('administer mastercal'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mastercal.admin.inc',
  );

  // Passes the CID of the calendar to edit.
  $items['admin/config/uiowa/mastercal/%/edit'] = array(
  'title' => 'Edit a calendar.',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('mastercal_edit_form', 4),
  'access arguments' => array('administer mastercal'),
  'file' => 'mastercal.admin.inc',
  );

  // Passes the CID of the calendar to remove.
  $items['admin/config/uiowa/mastercal/%/delete'] = array(
    'title' => 'Delete a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_delete_form', 4),
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Imports and updates all events in the database.
 */
function mastercal_cron() {
  // Initialize the nodes created/updated counter array.
  $nodes = array(
    'created' => 0,
    'updated' => 0
  );

  // Load the calendars from the database.
  $calendars = _mastercal_load();

  // For each calendar in the database, run get_events.
  foreach ($calendars as $calendar) {
    if ($calendar->connected == 1) {
      // If Workbench Access is enabled.
      if (module_exists('workbench_access')) {
        // Initialize the workbench_access_sections array.
        $workbench_access_sections = array();
        // If single section assignment.
        if (variable_get('workbench_access_allow_multiple') == 0) {
          $workbench_access_sections = unserialize($calendar->single_section);
        }
        // Multiple section assignment.
        else {
          $workbench_access_sections = unserialize($calendar->multiple_sections);
        }

        // Set the Workbench Access scheme variable.
        $workbench_access_scheme = variable_get('workbench_access');
      }

      // Assign the cid to a variable.
      $cid = $calendar->cid;

      // Get the result from the MC API.
      $events = _mastercal_get_events($cid);

      // If events is not null. Error handling if the MC API is down.
      if ($events) {
        // Iterate over each event.
        foreach ($events as $id => $event) {
          // Assign XML fields to variables if not empty, otherwise NULL.
          $eid = $id;
          $did = $event['EventDetailID'];
          $calendar_name = $calendar->name;
          $event_type = (!empty($event['EventTypeName'])) ? $event['EventTypeName'] : NULL;
          $contact_name = $event['ContactName'];
          $contact_email = $event['ContactEmail'];

          $event_location = (!empty($event['Location'])) ? $event['Location'] : NULL;
          $event_location_url = (!empty($event['LocationURL'])) ? $event['LocationURL'] : NULL;
          $event_canceled = ($event['Canceled'] == 'false') ? 0 : 1;
          $event_updated_date = _mastercal_format_date($event['EventUpdatedDate']);
          $event_detail_updated_date = _mastercal_format_date($event['EventDetailUpdatedDate']);

          // Count the number of dates.
          $n_dates = count($event['EventDate']);

          // See if the event already exists as a node in Drupal.
          $query = new EntityFieldQuery;
          $result = $query
          ->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'mastercal_event')
          ->fieldCondition('field_mc_eid', 'value', $eid, '=')
          ->execute();

          // If not, create and prepare a new node.
          if (empty($result)) {
            // Prepare the node object.
            $node = new stdClass();
            $node->type = 'mastercal_event';
            $node->language = LANGUAGE_NONE;
            node_object_prepare($node);

            // Sets publisher to first user.
            $node->uid = 1;

            // Add one to the created count.
            $nodes['created'] += 1;
          }
          // Otherwise, update the existing node.
          else {
            // Load the the existing node.
            $node_data = reset($result['node']);
            $node = node_load($node_data->nid);

            // Criteria to skip an event.
            // - The event has not been updated AND
            // - The number of dates within the range of this import equals the
            //   number of dates in the date field for this event AND
            // - The calendar this event belongs to is already in the
             //  field_mc_calendar array.
            if ($node->field_mc_updated_date['und'][0]['value'] == $event_updated_date && $node->field_mc_detail_updated_date['und'][0]['value'] == $event_detail_updated_date && $n_dates == count($node->field_mc_date['und']) && _mastercal_calendar_check($calendar_name, $node->field_mc_calendar['und'])) {
              // If Workbench Access is enabled.
              if (module_exists('workbench_access')) {
                // If retroactive assignment is enabled.
                if ($calendar->retroactive_assignment == 1) {
                  // Assign sections to node.
                  $node->workbench_access_scheme['access_scheme'] = $workbench_access_scheme;
                  $node->workbench_access = $workbench_access_sections;

                  // Save the node.
                  node_submit($node);
                  node_save($node);

                  // Add one to the updated count.
                  $nodes['updated'] += 1;
                }
              }
              // If so, continue on to the next iteration skipping the code below.
              continue;
            }

            // Add one to the updated count.
            $nodes['updated'] += 1;
          }

          // Assign variables to node object fields.
          $node->title = $event['Title'];
          $node->field_mc_eid['und'][0]['value'] = $eid;
          $node->field_mc_did['und'][0]['value'] = $did;
          $node->field_mc_type['und'][0]['value'] = $event_type;
          $node->field_mc_contact['und'][0]['value'] = $contact_name;
          $node->field_mc_email['und'][0]['value'] = $contact_email;

          $node->field_mc_location['und'][0]['value'] = $event_location;
          $node->field_mc_location_url['und'][0]['value'] = $event_location_url;
          $node->field_mc_canceled['und'][0]['value'] = $event_canceled;
          $node->field_mc_updated_date['und'][0]['value'] = $event_updated_date;
          $node->field_mc_detail_updated_date['und'][0]['value'] = $event_detail_updated_date;

          // If the first calendar name value is not set, assign the current
          // calendar name.
          if (!isset($node->field_mc_calendar['und'][0]['value'])) {
            $node->field_mc_calendar['und'][0]['value'] = $calendar_name;
          }
          else {
            // Set some flags for the calendar name loop.
            $calendar_exists = FALSE;
            $calendar_count = count($node->field_mc_calendar['und']);

            // Iterate over each item in field_mc_calendar['und'].
            for ($i = 0; $i < $calendar_count; $i++) {
              // If the item value equals the current calendar name, set the flag.
              if ($node->field_mc_calendar['und'][$i]['value'] == $calendar_name) {
                $calendar_exists = TRUE;
              }
            }

            // Add the current calendar name to the field if it doesn't exist.
            if ($calendar_exists == FALSE) {
              $node->field_mc_calendar['und'][$calendar_count]['value'] = $calendar_name;
            }
          }

          // If Workbench Access is enabled.
          if (module_exists('workbench_access')) {
            // Assign sections to node.
            $node->workbench_access_scheme['access_scheme'] = $workbench_access_scheme;
            $node->workbench_access = $workbench_access_sections;
          }

          // Prepare the body field.
          $node->body['und'][0]['value'] = _mastercal_format_string($event['Description']);
          $node->body['und'][0]['format'] = 'filtered_html';

          // Unset the date field.
          // This will make sure individual dates deleted on MC are respected in Arts Iowa.
          // @TODO: Look into canceling dates.
          unset($node->field_mc_date);

          // If multiple dates, iterate over each and assign it to the node properly.
          if ($n_dates > 1) {
            $count = 0;
            foreach ($event['EventDate'] as $day) {
              // Format the date.
              $date = _mastercal_format_date($day['Start']);

              // Assign the date to the field.
              $node->field_mc_date['und'][$count]['value'] = $date;
              $node->field_mc_date['und'][$count]['value2'] = $date;

              // Increment the count.
              $count += 1;
            }
          }
          else {
            // Format the date.
            $date = _mastercal_format_date($event['EventDate'][0]['Start']);

            // Assign the date to the field.
            $node->field_mc_date['und'][0]['value'] = $date;
            $node->field_mc_date['und'][0]['value2'] = $date;
          }

          // Grab the event data for this event using GetEvent. The 'Image' field
          // is not returned in GetEvents, among other fields.

          //Get the Title URL field

          $event_data = _mastercal_get_event($cid, $did);
          if (isset($event_data[0]['TitleUrl']) && !empty($event_data[0]['TitleUrl'])) {
            $node->field_mc_titleurl['und']['0']['value'] = $event_data[0]['TitleUrl'];
          }
          // If the event has an image, decode it, save it to the public file
          // system and assign it to the corresponding node.
          // NOTE : This uses the 'Add Image' link under the body field of the
          // Master Calendar submit form.
          if (isset($event_data[0]['Image'])) {
            $image = base64_decode($event_data[0]['Image']);
            $file = file_save_data($image, 'public://' . $event_data[0]['ImageName'], FILE_EXISTS_REPLACE);
            $node->field_mc_image['und']['0']['fid'] = $file->fid;
          }
          //If there is a phone number for the event contact add it
          if (isset($event_data[0]['ContactPhone']) && !empty($event_data[0]['ContactPhone'])) {
            $node->field_mc_phone['und'][0]['value'] = $event_data[0]['ContactPhone'];
          }

          // TODO: Refactor this to reduce running time.
          // Too many loops and API calls.

          // Get the UDQ's for this event.
          $udqs = _mastercal_get_udqs($cid, $eid);

          // Get the term selections for the calendar.
          $terms = unserialize($calendar->terms);

          // Run taxonomy functionality.
          if (!empty($terms)) {
            // An array of taxonomy terms.
            $taxonomy = array();

            // Iterate over each term.
            foreach ($terms as $key => $value) {
              // Get the UDQID for each term selection.
              if ($value != 0) {
                foreach ($udqs as $udq) {
                  // If the UDQID matches the selection value, assign it to the
                  // taxonomy array.
                  if ($udq['UDQID'] == $value && !empty($udq['Answer'])) {
                    $taxonomy[$udq['UDQID']] = $udq['Answer'];
                  }
                }
              }
            }

            // Count.
            $n = 0;

            // Iterate over each taxonomy term.
            foreach ($taxonomy as $key2 => $value2) {
              // Return the tid of the taxonomy term, if set.
              $tid = _mastercal_create_term($value2);

              // Assign the term to the event type field.
              if (!empty($tid)) {
                $node->field_mc_tags['und'][$n]['tid'] = $tid;

                // Increment the count.
                $n++;
              }
            }
          }

          // Iterate over each UDQ.
          foreach ($udqs as $udq2) {
            // Create a reusable field name variable.
            $field_name = 'field_mc_calendar_' . $calendar->cid . '_udq_' . $udq2['UDQID'];

            // Assign the field instance to a variable.
            $field_instance = field_info_instance('node', $field_name, 'mastercal_event');

            // If the field instance exists.
            if ($field_instance) {
              // If the field instance is a date.
              if ($field_instance['widget']['type'] == 'date_popup') {
                // Format the date and assign it.
                $answer = !empty($udq2['Answer']) ? _mastercal_format_date($udq2['Answer']) : NULL;
              }
              elseif ($field_instance['widget']['type'] == 'textfield') {
                 $answer = !empty($udq2['Answer']) ? substr($udq2['Answer'], 0, 254) : NULL;
               }
               else {
                // Assign the value.
                $answer = !empty($udq2['Answer']) ? $udq2['Answer'] : NULL;
              }

              // Save the field to the node.
              $code = '$node->' . $field_name . '["und"][0]["value"] = $answer;';
              eval($code);
            }
          }

          // Save the node.
          node_submit($node);
          node_save($node);
        }
      }
    }

    // Set confirmation message with number of nodes created and updated.
    drupal_set_message(t("@created @calendar events created, @updated @calendar events updated.",
    array('@calendar' => $calendar->name, '@created' => $nodes['created'], '@updated' => $nodes['updated'])));
  }
}


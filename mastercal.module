<?php
/**
 * @file
 * A module integrating UIowa Master Calendar with Drupal.
 *
 * This module imports University of Iowa Master Calendar events as nodes into Drupal.
 * 
 */

// Include the helper functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.helper.inc';

// Include the WSCLient functions.
include_once drupal_get_path('module', 'mastercal') . '/mastercal.wsclient.inc';

/**
 * Implements hook_help().
 */
function mastercal_help($path, $arg) {
  if ($path == 'admin/help#mastercal') {
    return t('A module to import events as nodes from the University of Iowa Master Calendar.');
  }
}

/**
 * Implements hook_permission().
 * - The option to give this permission will show up under Mastercal in the permissions page.
 */
function mastercal_permission() {
  return array(
    'administer mastercal' => array(
      'title' => t('Administer mastercal'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mastercal_menu() {
  $items = array();
  
  $items['admin/config/uiowa'] = array(
    'title' => 'UIowa Module Package',
    'description' => 'Custom modules developed by ITS Web Services.',
    'position' => 'right',
    'weight' => '4',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_uiowa_form'),
    'access arguments' => array('administer_mastercal'),
    'file' => 'mastercal.admin.inc',
  );
  
  //path to config
  $items['admin/config/uiowa/mastercal'] = array(
    'title' => 'Master Calendar',
    'description' => 'Add, remove and configure calendars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_admin_form'),
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );
    
  //callback url for adding a new calendar
  //the function mastercal_add_form() in the admin.inc file provides the form
  $items['admin/config/uiowa/mastercal/add'] = array(
    'title' => 'Add a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_add_form'),
    'access arguments' => array('administer mastercal'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mastercal.admin.inc',
  );
  
  //passes the calendar id of the item you are trying to remove
  //the access callback should be changed to be more restrictive
  $items['admin/config/uiowa/mastercal/%/delete'] = array(
    'title' => 'Delete a calendar.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_delete_form', 4),
    'access callback' => True,
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );
  
  
  $items['org/testcal'] = array(
    'title' => 'Tests',
    'page callback' => 'mastercal_testview',
    'access callback' => TRUE,
  );
  
  return $items;
}

function mastercal_cron() {
    $result = mastercal_get_events($param);
    $xml = simplexml_load_string(utf8_encode($result->GetEventsResult));
    $calenss = array();
    $count = 0;
    //parse the xml response from the web service using SimpleXML
    foreach ($xml->children() as $child) {
      //create an array to store the data
      $cals = array();
      foreach ($child->children() as $subchild) {
        //associate array var['Name of field'] = 'value of field'
        $cals[$subchild->getName()] = (string) $subchild;
      }
      $calens[] = $cals;
      $count .= 1;
    }

    if (isset($calens)) {
      $events = _mastercal_collapse_dates($calens);
    }
    else {
      $events = Null;
    }
    //initialize the JSON string so I can append to it later
    //there may be a better way to create this JSON
    $nodes = array(
      'saved' => 0,
      'passed' => 0
    );
    
    foreach ($events as $id => $event) {
      $cid = $id;
      $did = $event['EventDetailID'];
      $contact_name = $event['ContactName'];
      $contact_email = $event['ContactEmail'];
      
      $event_loc = (!empty($event['Location'])) ? $event['Location'] : NULL;
      $event_loc_url = (!empty($event['LocationURL'])) ? $event['LocationURL'] : NULL;
      
      $node = new stdClass();
      $node->type = 'node_event';
      $node->language = LANGUAGE_NONE;
      node_object_prepare($node);
      $node->title = $event['Title'];
      $node->body['und'][0]['value'] = $event['Description'];
      $node->body['und'][0]['format'] = 'filtered_html';
      $node->field_event_cid['und'][0]['value'] = $cid;
      $node->field_event_did['und'][0]['value'] = $did;
      
     $param['eventDetailId'] = $did;
      
      $event_data = mastercal_getEvent($param);
        if (isset($event_data[0]['Image'])) {
          $image = base64_decode($event_data[0]['Image']);
          $file = file_save_data($image, 'public://' . $event_data[0]['ImageName'], FILE_EXISTS_REPLACE);
          $node->field_event_image['und']['0']['fid'] = $file->fid;
        }
      
      $node->field_event_contact['und'][0]['value'] = $contact_name;
      $n_dates = count($event['EventDate']);
      if ($n_dates > 1) {
        $count = 0;
        foreach ($event['EventDate'] as $day) {
          $date = explode('T', $day['Start']);
          $time = explode('-', $date[1]);
          $datetime = $date[0] . ' ' . $time[0];
          $the_date = gmdate('Y-m-d H:i:s', strtotime($datetime));
          
          $node->field_event_date['und'][$count]['value'] = $the_date;
          $node->field_event_date['und'][$count]['value2'] = $the_date;
         
          $count += 1;
        }
      } 
      else {
        $date = explode('T', $event['EventDate'][0]['Start']);
        $time = explode('-', $date[1]);
        $datetime = $date[0] . ' ' . $time[0];
        $the_date = gmdate('Y-m-d H:i:s', strtotime($datetime));

        $node->field_event_date['und'][0]['value'] = $the_date;
        $node->field_event_date['und'][0]['value2'] = $the_date;
        $node->field_event_date['und'][0]['date_type'] = 'datetime';
      }
      
      // Sets publisher to first user.
      $node->uid = 1;
      
      $node->field_event_location['und'][0]['value'] = $event_loc;
      if (!empty($event_loc_url)) {
        $node->field_event_url['und'][0]['value'] = $event_loc_url;
      }
      if (!empty($event_tag)) {
        $type_name = $event_tag;    
        _mastercal_create_terms(array($type_name));
        $tid = db_query_range('SELECT tid FROM {taxonomy_term_data} WHERE name = :name ORDER BY tid DESC', 0, 
          1, array(':name' => $type_name))->fetchField();

          
        if (!empty($tid)) {
          $node->field_event_type['und'][0]['tid'] = $tid;
        }
      }
      
      $query = new EntityFieldQuery;
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'node_event')
        ->fieldCondition('field_event_cid', 'value', $cid, '=')
        ->execute();
        
      if (empty($result)) {
        node_submit($node);
        node_save($node);
        $nodes['saved'] += 1;
        $node_re = node_load($node->nid);
        node_save($node_re);
      }
      else {
        $nodes['passed'] += 1;
      }
    }
    

    drupal_set_message(t("@saved nodes created, @pass events skipped.", array(
      '@saved' => $nodes['saved'], 
      '@pass' => $nodes['passed'])
      ) 
    );
}


<?php
// $Id$

/**
 * @file
 * A module integrating DEA Master Calendar with Drupal.
 *
 * This module provides a block with an events stream and a page that displays the same events in a calendar format. 
 * 
 */

 //sets a couple default values

//these will be removed at a later date
define('MASTERCAL_ID', 62);
define('MASTERCAL_AUTH', False);




 
/**
 * Implements hook_help().
 */
function mastercal_help($path, $arg) {
  if ($path == 'admin/help#mastercal') {
    return t('A module to display Calendar data from Master Calendar.');
  }
}

/**
 * Implements hook_permission().
 * - The option to give this permission will show up under Mastercal in the permissions page
 */
function mastercal_permission() {
  return array(
    'administer mastercal' => array(
      'title' => t('Administer mastercal'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function mastercal_menu() {
  $items = array();
  
  //path to old config
  $items['admin/config/people/mastercal'] = array(
    'title' => 'mastercal',
    'description' => 'config page for mastercal module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );
  //path to new config...transition in progress
    $items['admin/config/user-interface/mastercal'] = array(
    'title' => 'Calendars',
    'description' => 'Add and modify Calendar sets.',
    'page callback' => 'mastercal_set_admin',
    'access arguments' => array('administer mastercal'),
    'file' => 'mastercal.admin.inc',
  );
  //callback url for adding a new calendar
  //the function mastercal_set_add_form() in the admin.inc file provides the form
  $items['admin/config/user-interface/mastercal/add-set'] = array(
    'title' => 'Add calendar set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_set_add_form'),
    'access arguments' => array('administer mastercal'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'mastercal.admin.inc',
  );
  //passes the calendar id of the item you are trying to remove
  //the access callback should be changed to be more restrictive
  $items['admin/config/user-interface/mastercal/%/delete'] = array(
    'title' => 'Delete shortcut set',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mastercal_set_delete_form', 4),
    'access callback' => True,
    'access arguments' => array(4),
    'file' => 'mastercal.admin.inc',
  );
  
  //path to page view
  $items['org/calendar'] = array(
    'title' => 'Calendar',
    'page callback' => 'mastercal_pageview',
    'access callback' => TRUE,
  );
  
  return $items;
}

function mastercal_cron() {
  if (variable_get('MASTERCAL_AUTH')) {
  //initialize an instance of the mastercalSOAP class then call the GetEvents() method
  //the calednars being queried for the events list are loaded from the database
    $events = client()->GetEvents();
    //print_r($events);
    //initialize the JSON string so I can append to it later
    //there may be a better way to create thsi JSON
    $widgetData  = '';
    $count = 0;
    foreach($events as $event) {
      // Create node object.
      
      while ($count < 2) {
        dprint_r($event);
        $count = $count + 1;
      }
    }

    return "sweet";
  }else {
    return array(
      'prefix_suffix' => array(
        '#markup' => 'Configure the Calendar first!',
        '#prefix' => "<h2>",
        '#suffix' => "</h2>",
      ),

    );
  }
  
}

/**
 * Function to create page view
 *
 * Currently this page can be accessed at example.com/org/calendar
 */
function mastercal_pageview() {
//This condition was to make sure a calendar has been added and the soapclient
//successfully intialized but will be phased out soon
  if (variable_get('MASTERCAL_AUTH')) {
  //initialize an instance of the mastercalSOAP class then call the GetEvents() method
  //the calednars being queried for the events list are loaded from the database
    $events = client()->GetEvents();
    //print_r($events);
    //initialize the JSON string so I can append to it later
    //there may be a better way to create thsi JSON
    $widgetData  = '';
    foreach($events as $event) {
      $cid = $event['EventID'];
      $contact_name = $event['ContactName'];
      $contact_email = $event['ContactEmail'];
      $date = explode('T', $event['EventDate']);
      $time = explode('-',$date[1]);
      $datetime = $date[0] . ' ' . $time[0];
      $event_loc = (!empty($event['Location'])) ? $event['Location'] : null;
      $event_loc_url = (!empty($event['LocationURL'])) ? $event['LocationURL'] : null;
      
      $node = new StdClass();
      $node->type = 'node_event';
      $node->language = LANGUAGE_NONE;
      node_object_prepare($node);
      $node->title = $event['Title'] . ' - ' . $datetime;
      $node->field_event_cid['und'][0]['value'] = $cid;
      $node->field_event_contact['und'][0]['value'] = $contact_name;

      dprint_r($datetime);
      $node->field_event_date['und'][0]['value'] = $datetime;
      $node->field_event_location['und'][0]['value'] = $event_loc;
      $node->field_event_url['und'][0]['value'] = $event_loc_url;
      $query = new EntityFieldQuery;
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'node_event')
        ->propertyCondition('title', $node->title)
        ->execute();
    
      if (empty($result)) {
        node_submit($node);
        node_save($node);
      } else {
        print_r('exists');
      }

      
      //print_r($cid);
      $widgetData .= "{title:'".$event['Title']."',start:'".$event['EventDate']."'},";
    }
    //$calendars = client()->GetCals();
    //adds a failry commonplace jquery library initializing statement and adds our event data in teh middle
    drupal_add_js(
      '(function($){jQuery(document).ready(function () { 
        $("#mastercal_page").fullCalendar({
        events: [' . $widgetData . ']
        }) });})(jQuery);', 
        array('type' => 'inline', 'scope' => 'header', 'weight' => 5)
    );   
    //print_r($calendars);

    return array(
      'calendar' => array(
          '#markup' => 'Calendar',
          '#prefix' => '<div id="mastercal_page">',
          '#suffix' => '</div>',
      ),
    );
  }else {
    return array(
      'prefix_suffix' => array(
        '#markup' => 'Configure the Calendar first!',
        '#prefix' => "<h2>",
        '#suffix' => "</h2>",
      ),

    );
  }
  
}

/**
 * Form builder; Create and display the Whitepages configuration settings form.
 */
 //old config code...will be replaced with code in admin.inc
function mastercal_form($form, &$form_state) {
   $calendars = client()->GetCals();
   
   $form['mastercal_name'] = array(
       '#type' => 'select',
       '#title' => t('Calendar'),
       '#options' => $calendars,
       '#default_value' => variable_get('mastercal_id', MASTERCAL_ID),
       '#description' => t('Set this to <em>Yes</em> if you would like this category to be selected by default.'),
   );
  $form = system_settings_form($form);
  $form['#submit'][] = 'mastercal_form_submit';
  return $form;
}

/**
 * Form submit handler. Save configuration settings for User Warn module.
 */
function mastercal_form_submit($form, &$form_state) {
  
  variable_set('mastercal_id', $form_state['values']['mastercal_name']);
  variable_set('MASTERCAL_AUTH', True);
  $calarray = client()->GetCals();
  variable_set('mastercal_name', $calarray[$form_state['values']['mastercal_name']]);
 
  drupal_set_message('The settings have been saved!');
}



function client() {
  require_once('mastercal_class.inc');
  $client = new mastercalSOAP();
    
  return $client;
}





/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function mastercal_block_info() {

  $blocks['mastercal_block'] = array(
    'info' => t('MasterCal: block'),

  );

  return $blocks;
}



/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function mastercal_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block = array();
  switch ($delta) {
    case 'mastercal_block':
      $block['subject'] = t('Events');
      if (variable_get('MASTERCAL_AUTH')) {
        $block['content'] = mastercal_contents('mastercal_block');
      } else {
        $block['content'] = 'Configure the mastercal module first';
      }
      break;
  }
  return $block;
}

/**
 * A module-defined block content function.
 */
function mastercal_contents($which_block) {
  switch ($which_block) {

    case 'mastercal_block':
      $calendars = client()->GetEvents();
      //print_r(client()->GetEvent());
      if (isset($calendars)) {
        foreach($calendars as $event) {
          $body = '<a class="event-show" href="#">';
          $body .= $event['Title'];
          $body .= '</a><br /><div class="more-event">';
          if ($event['Location']) {
            $body .= '<strong>Location: </strong>';
            if ($event['LocationURL']) {
              $loc = '<a href="' . $event['LocationURL'] .'">';
              $loc .= $event['Location'] .'</a><br />';
            } else { $loc = $event['Location']; }
            $body .= $loc.'<br />';
          }
          $body .= $event['Description'] . '<br />';

          $body .= '<strong>Contact: </strong>';
          $body .= '<a href="mailto:' . $event['ContactEmail'] . '">';
          $body .= $event['ContactName'] . '</a>';
          $body .= '<br />';
          
          $date = explode('T', $event['EventDate']);
            
            $events[] = array(
                          'data' => $date[0],
                          'children' => array($body),
                        );
                          
          
        }
      }else { $events = Null; }
      $events = (isset($events) ? $events : array('No items to show'));
      //print_r($events);
      return array(
        'second_para' => array(
            '#items' => $events,
            '#theme' => 'item_list',
            '#prefix' => '<div id="mastercal_block">',
            '#suffix' => '</div>',
        ),
      );
  }
}
function cal_exists($cid) {
  return (bool) db_query_range('SELECT 1 FROM {mastercal_source} WHERE cid = :cid', 0, 1, array(':cid' => $cid))->fetchField();
}

function mastercal_save(&$cal) {
  // Save the calendar ID and its name to teh database
 $return = db_insert('mastercal_source')
            ->fields(array(
                'title' => $cal['Name'],
                'cid' => (int)$cal['CalendarID'],
              )
            )
            ->execute();
  return $return;
}

function mastercal_load() {
//for simple queries it is more economical to use db_query and SQL than to use the new Drupal 7 methods
  $result = db_query("SELECT title, cid FROM {mastercal_source}");
  return $result;
}
function mastercal_delete($cid) {
  $deleted = db_delete('mastercal_source')
  ->condition('cid', $cid)
  ->execute();
  return $deleted;
}